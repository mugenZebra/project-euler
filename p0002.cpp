/*
Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
*/

#include <iostream>

using namespace std;

// E(n)=4*E(n-1)+E(n-2)
// a sequence of every third fibonacci number: 2, 8, 34, 144, ....
int sumOfFibNum(int n){
    if (n == 0) return 2;
    if (n == 1) return 8;
    else return 4 * sumOfFibNum(n-1) + sumOfFibNum(n-2);
}

int main()
{
    // my solution
    int sum = 0;
    int num1 = 0;
    int num2 = 1;
    int upperLimit = 4000000; //4,000,000

    while(num1 < upperLimit){
        if((num1 % 2) == 0){
            sum += num1;
        }
        if((num2 % 2) == 0){
            sum += num2;
        }
        num1 = num1 + num2;
        num2 = num1 + num2;
    }

    cout << "sum: " << sum << endl;

    // suggested solution 1:every third fibonicci number is even
    // 1, 1, 2, 3, 5, 8, 13, 21, 34.... because odd + odd = even
    sum = 0;
    num1 = 1;
    num2 = 1;
    int num3 = num1 + num2;
    while(num3 < upperLimit){
        sum += num3;
        num1 = num2 + num3;
        num2 = num3 + num1;
        num3 = num1 + num2;
    } // while
    cout << "sum = " << sum << endl;

    //suggested solution 2: using recursion
    int i;
    sum = 0;
    for(i = 0; ; i++){
        num1 = sumOfFibNum(i);
        if(num1 < upperLimit){
            sum += num1;
        } // if
        else{
            break;
        }
    }// for
    cout << sum << endl;

    return 0;
}
